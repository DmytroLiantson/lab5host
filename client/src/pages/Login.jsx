import React, { useState } from 'react';
import { signInWithEmailAndPassword, createUserWithEmailAndPassword, signInWithPopup, GoogleAuthProvider } from 'firebase/auth';
import { auth, saveUserToFirestore } from '../firebase/firebase'; 
import { useNavigate } from 'react-router-dom';
import { toast } from 'react-toastify';
import './Login.css';

export default function Login() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [name, setName] = useState('');
  const [age, setAge] = useState('');
  const [isRegistering, setIsRegistering] = useState(false);
  const navigate = useNavigate();
  const provider = new GoogleAuthProvider();

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      let userCredential;
      if (isRegistering) {
        if (!name.trim()) {
          console.log('–ü–æ–º–∏–ª–∫–∞: —ñ–º‚Äô—è –ø–æ—Ä–æ–∂–Ω—î');
          toast.error('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —ñ–º‚Äô—è', { position: 'top-right', autoClose: 3000 });
          return;
        }
        if (!age || isNaN(age) || age < 1 || age > 120) {
          console.log('–ü–æ–º–∏–ª–∫–∞: –Ω–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤—ñ–∫');
          toast.error('–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤—ñ–∫ (1-120)', { position: 'top-right', autoClose: 3000 });
          return;
        }
        console.log('–°–ø—Ä–æ–±–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó');
        userCredential = await createUserWithEmailAndPassword(auth, email, password);
        await saveUserToFirestore(userCredential.user, { name, age: parseInt(age) });
        console.log('–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞, –ø–æ–∫–∞–∑—É—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è');
        toast.success('–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!', { position: 'top-right', autoClose: 3000 });
        navigate('/progress');
      } else {
        console.log('–°–ø—Ä–æ–±–∞ –≤—Ö–æ–¥—É');
        userCredential = await signInWithEmailAndPassword(auth, email, password);
        await saveUserToFirestore(userCredential.user);
        console.log('–í—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π, –ø–æ–∫–∞–∑—É—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è');
        toast.success('–í—Ö—ñ–¥ —É—Å–ø—ñ—à–Ω–∏–π!', { position: 'top-right', autoClose: 3000 });
        navigate('/progress');
      }
    } catch (error) {
      console.log('–ü–æ–º–∏–ª–∫–∞:', error.message);
      toast.error('–ü–æ–º–∏–ª–∫–∞: ' + error.message, { position: 'top-right', autoClose: 3000 });
    }
  };

  const handleGoogleLogin = async () => {
    try {
      console.log('–°–ø—Ä–æ–±–∞ –≤—Ö–æ–¥—É —á–µ—Ä–µ–∑ Google');
      const result = await signInWithPopup(auth, provider);
      await saveUserToFirestore(result.user);
      console.log('–í—Ö—ñ–¥ —á–µ—Ä–µ–∑ Google —É—Å–ø—ñ—à–Ω–∏–π, –ø–æ–∫–∞–∑—É—î–º–æ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è');
      toast.success('–£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥ —á–µ—Ä–µ–∑ Google!', { position: 'top-right', autoClose: 3000 });
      navigate('/progress');
    } catch (error) {
      console.log('Google-–ø–æ–º–∏–ª–∫–∞:', error.message);
      toast.error('Google-–ø–æ–º–∏–ª–∫–∞: ' + error.message, { position: 'top-right', autoClose: 3000 });
    }
  };

  return (
    <div className="auth-container">
      <h2>{isRegistering ? '–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è' : '–í—Ö—ñ–¥'}</h2>
      <form onSubmit={handleSubmit} className="auth-form">
        <input
          type="email"
          placeholder="Email"
          value={email}
          onChange={(e) => setEmail(e.target.value)}
          required
        />
        <input
          type="password"
          placeholder="–ü–∞—Ä–æ–ª—å"
          value={password}
          onChange={(e) => setPassword(e.target.value)}
          required
        />
        {isRegistering && (
          <>
            <input
              type="text"
              placeholder="–Ü–º‚Äô—è"
              value={name}
              onChange={(e) => setName(e.target.value)}
              required
            />
            <input
              type="number"
              placeholder="–í—ñ–∫"
              value={age}
              onChange={(e) => setAge(e.target.value)}
              required
              min="1"
              max="120"
            />
          </>
        )}
        <button type="submit">{isRegistering ? '–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è' : '–£–≤—ñ–π—Ç–∏'}</button>
      </form>

      <p onClick={() => setIsRegistering(!isRegistering)} className="switch-mode">
        {isRegistering ? '–í–∂–µ –º–∞—î—Ç–µ –∞–∫–∞—É–Ω—Ç? –£–≤—ñ–π—Ç–∏' : '–ù–µ–º–∞—î –∞–∫–∞—É–Ω—Ç—É? –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è'}
      </p>

      <hr />
      <button className="google-btn" onClick={handleGoogleLogin}>
        <span role="img" aria-label="Google">üåê</span> –£–≤—ñ–π—Ç–∏ —á–µ—Ä–µ–∑ Google
      </button>
    </div>
  );
}